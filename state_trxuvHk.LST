C51 COMPILER V9.02   STATE_TRXUVHK                                                         05/20/2014 11:03:52 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE STATE_TRXUVHK
OBJECT MODULE PLACED IN state_trxuvHk.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE state_trxuvHk.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael
   2          
   3          #include "comm_imc.h"
   4          #include "comm_itc.h"
   5          
   6          #include "state_util.h"
   7          
   8          // 2ms is proven to be working well so long as the ISIS_DELAY_MS in comm_generic.c is set to be 2ms as wel
             -l
   9          // triple the value just to be safe in case ISIS "clock stretching" goes wild...
  10          #define TRXUVHK_PREPARE_REPLY_MS    6
  11          #define TRXUVHK_NUMEL               4
  12          
  13          volatile unsigned char trxuvHk_cycle = 0;
  14          
  15          char Trxuv_isAvailable();
  16          
  17          char State_trxuvHk(char* subtask) {
  18   1        char release = 0; // default return choice: do not release state, unless specific set (see release = 1; 
             -instruction below)
  19   1        if (Trxuv_isAvailable()) {
  20   2          switch (*subtask) {
  21   3          case 0: // contact trxuv
  22   3            switch (trxuvHk_cycle) {
  23   4            case 0:
  24   4              Comm_allTelemetryPut();
  25   4              break;
  26   4            case 1:
  27   4              Comm_rxUptimePut();
  28   4              break;
  29   4            case 2:
  30   4              Comm_txUptimePut();
  31   4              break;
  32   4            case TRXUVHK_NUMEL - 1: // 3
  33   4              Comm_txStatusPut();
  34   4              break;
  35   4            }
  36   3            Timertask_setExecuteOnce(&g_stateTask, TRXUVHK_PREPARE_REPLY_MS);
  37   3            ++*subtask;
  38   3            break;
  39   3          case 1: // demand reply from trxuv
  40   3            if (Timertask_isReady(&g_stateTask)) {
  41   4              switch (trxuvHk_cycle) {
  42   5              case 0:
  43   5                Comm_allTelemetryGet();
  44   5                break;
  45   5              case 1:
  46   5                Comm_rxUptimeGet();
  47   5                break;
  48   5              case 2:
  49   5                Comm_txUptimeGet();
  50   5                break;
  51   5              case TRXUVHK_NUMEL - 1: // 3
  52   5                Comm_txStatusGet();
  53   5                break;
C51 COMPILER V9.02   STATE_TRXUVHK                                                         05/20/2014 11:03:52 PAGE 2   

  54   5              }
  55   4              ++trxuvHk_cycle;
  56   4              trxuvHk_cycle %= TRXUVHK_NUMEL;
  57   4              release = 1;
  58   4            }
  59   3            break;
  60   3          }
  61   2        } else { // if comm not available these are the suggested default values
  62   2          g_itc.tx_status = 0;
  63   2          g_itc.tx_available = 0;
  64   2          release = 1;
  65   2        }
  66   1        return release;
  67   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    235    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
