C51 COMPILER V9.02   RTC_GENERIC                                                           05/20/2014 11:03:52 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE RTC_GENERIC
OBJECT MODULE PLACED IN rtc_generic.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE rtc_generic.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael
   2          
   3          #include <c8051f120.h>
   4          #include <string.h>
   5          
   6          #include "C8051_SMBus.h"
   7          
   8          #include "Velox_delay.h"
   9          
  10          #include "rtc_generic.h"
  11          
  12          #define RTC_SHORT_DELAY_MS  2 // jan changed to 2-3 ms
  13          // ---
  14          #define RTC_ADDRESS         0xD0 // RTC M41781S address -> 1101 0000
  15          #define RTC_I2C_WR_LENGTH   21 // TODO page in data sheet
  16          #define RTC_I2C_RD_LENGTH   20 // read length is less one than write because it does not need to use one b
             -yte to point to the initial position
  17          // ---
  18          
  19          char* rtc_txbuffer;
  20          char* rtc_rxbuffer;
  21          
  22          // This RTC library may need to come together with date and time library?
  23          void Rtc_init(char* i2c_txbuffer, char* i2c_rxbuffer) {
  24   1        rtc_txbuffer = i2c_txbuffer;
  25   1        rtc_rxbuffer = i2c_rxbuffer;
  26   1      }
  27          
  28          // This function is to update RTC value to RTC chip literally
  29          void Rtc_setRawTime(RtcStamp* rtcStamp) {
  30   1        memset(rtc_txbuffer, 0, RTC_I2C_WR_LENGTH);
  31   1        memcpy(&rtc_txbuffer[1], rtcStamp, sizeof(RtcStamp)); // TODO page in datasheet, comment what info needs
             - to be passed in what bytes
  32   1        // ---
  33   1        SMBus_setTxBuffer(rtc_txbuffer, RTC_I2C_WR_LENGTH);
  34   1        SMBus_start(SMB_writeTo, RTC_ADDRESS);
  35   1        Delay_blockMs(RTC_SHORT_DELAY_MS);
  36   1      }
  37          
  38          // These functions are to obtain RTC value from the RTC chip literally
  39          void Rtc_obtainStampPut() {
  40   1        SMBus_setRxBuffer(rtc_rxbuffer, RTC_I2C_RD_LENGTH);
  41   1        SMBus_start(SMB_readFrom, RTC_ADDRESS);
  42   1      }
  43          
  44          char Rtc_isConsistent(RtcStamp* rtcStamp) {
  45   1        char success;
  46   1        unsigned char value;
  47   1        success = 1;
  48   1        success &= rtcStamp->centis < 100;
  49   1        success &= twoDec2oneHex(rtcStamp->second) < 60;
  50   1        success &= twoDec2oneHex(rtcStamp->minute) < 60;
  51   1        success &= twoDec2oneHex(rtcStamp->hour) < 24;
  52   1        // ---
  53   1        value = twoDec2oneHex(rtcStamp->day);
C51 COMPILER V9.02   RTC_GENERIC                                                           05/20/2014 11:03:52 PAGE 2   

  54   1        success &= 0 < value && value <= 31;
  55   1        value = twoDec2oneHex(rtcStamp->month);
  56   1        success &= 0 < value && value <= 12;
  57   1        success &= twoDec2oneHex(rtcStamp->yearMod100) < 100;
  58   1        return success;
  59   1      }
  60          
  61          // returns success status: true or false
  62          // if successful the content of rtc_p contains the copy of the rtc memory with date info
  63          char Rtc_obtainStampGet(RtcStamp* rtcStamp) { // sizeof RtcStamp is of different size from length
  64   1        short length;
  65   1        if (SMBus_isRxComplete(&length))
  66   1          if (length == RTC_I2C_RD_LENGTH) { // check length for expected length to have some notion of guarante
             -e
  67   2            memcpy(rtcStamp, rtc_rxbuffer, sizeof(RtcStamp)); // get from milliseconds
  68   2            rtcStamp->centis = twoDec2oneHex(rtcStamp->centis); // convert to decimal, since much easier to post
             --process!
  69   2            return Rtc_isConsistent(rtcStamp);
  70   2          }
  71   1        return 0;
  72   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1045    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     25    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
