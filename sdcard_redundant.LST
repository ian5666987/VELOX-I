C51 COMPILER V9.02   SDCARD_REDUNDANT                                                      05/20/2014 11:03:52 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE SDCARD_REDUNDANT
OBJECT MODULE PLACED IN sdcard_redundant.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE sdcard_redundant.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael
   2          
   3          #include "sdcard_generic.h"
   4          #include "sdcard_redundant.h"
   5          
   6          char (*SDred_check_func)(void*, short);
   7          char* SDred_readback;
   8          
   9          extern unsigned short sd_card_store_failures;
  10          
  11          void SDred_init(char (*check_func)(void*, short), void* buffer) {
  12   1        SDred_check_func = check_func;
  13   1        SDred_readback = (char*) buffer;
  14   1      }
  15          
  16          // returns 1 for successful reading, then buffer contains sd card page up to length bytes
  17          // 0 for unsuccessful, then buffer content up to length bytes is undefined
  18          char SDred_read(unsigned long start_block, void* buffer, short length, char copies) {
  19   1        char index;
  20   1        char success;
  21   1        for (index = 0; index < copies; ++index) {
  22   2          success = SD_readSingleBlock(start_block + index, buffer, length);
  23   2          ++g_sdcard.read.count;
  24   2          if (success && SDred_check_func(buffer, length))
  25   2            return 1;
  26   2          else {
  27   3            ++g_sdcard.read.failures;
  28   3            g_sdcard.read.lastFailAddress = start_block + index;
  29   3            // ---
  30   3            success = SD_readSingleBlock(start_block + index, buffer, length); // try again once
  31   3            ++g_sdcard.read.count;
  32   3            if (success && SDred_check_func(buffer, length))
  33   3              return 1;
  34   3          }
  35   2        }
  36   1        return 0;
  37   1      }
  38          
  39          char SDred_write(unsigned long start_block, void* buffer, short length, char copies) {
  40   1        char index;
  41   1        char success;
  42   1        char numel = 0;
  43   1        for (index = 0; index < copies; ++index) {
  44   2          success = SD_writeSingleBlock(start_block + index, buffer, length);
  45   2          ++g_sdcard.write.count;
  46   2          if (success) {
  47   3            ++numel;
  48   3            // check right away by read-back data once, and if necessary rewrite once, then proceed to next bloc
             -k
  49   3            if (!SDred_read(start_block + index, SDred_readback, length, copies)) { // if read-back is not succe
             -ssful
  50   4              ++g_sdcard.write.failures; // ... increment failure count
  51   4              g_sdcard.write.lastFailAddress = start_block + index;
  52   4              success = SD_writeSingleBlock(start_block + index, buffer, length); // give it one more try
  53   4              numel += success;
C51 COMPILER V9.02   SDCARD_REDUNDANT                                                      05/20/2014 11:03:52 PAGE 2   

  54   4            }
  55   3          }
  56   2          // ---
  57   2          if (!success) {
  58   3            ++g_sdcard.write.failures;
  59   3            g_sdcard.write.lastFailAddress = start_block + index;
  60   3          }
  61   2        }
  62   1        if (!numel) //If there is no successful storing at all, increases this.
  63   1          ++sd_card_store_failures;
  64   1        return numel; // Return the number of time of successful writing
  65   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1015    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     37    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
