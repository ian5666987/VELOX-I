C51 COMPILER V9.02   PWRS_HOUSEKEEPING                                                     12/28/2012 14:31:20 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE PWRS_HOUSEKEEPING
OBJECT MODULE PLACED IN PWRS_housekeeping.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE PWRS_housekeeping.c LARGE OPTIMIZE(0,SIZE) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael maintained by JM all
   2          
   3          #include <c8051F120.h>
   4          //#include <stdio.h>
   5          #include <string.h>
   6          #include "C8051_SMBus.h"
   7          #include "C8051_adc.h"
   8          #include "C8051_mcutemp.h"
   9          #include "C8051_oscillator.h"
  10          #include "Velox_sfrstack.h"
  11          #include "Velox_raid.h"
  12          #include "PWRS_main.h"
  13          #include "PWRS_port.h"
  14          #include "PWRS_extern_data.h"
  15          #include "PWRS_constant.h"
  16          #include "PWRS_conversions.h"
  17          #include "PWRS_calibration.h"
  18          #include "PWRS_camera.h"
  19          #include "PWRS_mux.h"
  20          
  21          void Housekeeping_getAll() {
  22   1        float pin_mv[8][8];
  23   1        char i;
  24   1      
  25   1        Mux_getAll(pin_mv, g_uc_ADC_SAMPLE_COUNT); //
  26   1        for (i = 0; i < 3; i++) {
  27   2          // page 118
  28   2          //   47.0k Ohm and 68.0k Ohm are resistors in the circuit
  29   2          g_us_PV_V[i] = (pin_mv[i][0] * (68.0 + 47.0) / 47.0) + fm_Calibration.PV_V_OFFSET_CORR[i]; // HK VALUE
             - *(115/47)*(VREFD_mV/4096)
  30   2        }
  31   1      
  32   1        for (i = 0; i < 3; i++) {
  33   2          //  mV  ->  I ---  HK VALUE *(1/(0.033*20))
  34   2          // 0.033 Ohm   is resistor through which the current goes, 20 is the gain amp of the voltage drop
  35   2          g_us_PV_I[i] = (pin_mv[i][1] / (0.033 * 20)) + fm_Calibration.PV_I_OFFSET_CORR[i];
  36   2        }
  37   1      
  38   1        for (i = 0; i < 5; i++) {
  39   2          //  mV  ->  T
  40   2          g_uc_SP_TEMP[i] = LM94022_decodeTemperature(pin_mv[i][2]) + fm_Calibration.SP_TEMP_OFFSET_CORR[i]; //H
             -K VALUE
  41   2        }
  42   1      
  43   1        for (i = 0; i < 4; i++) {
  44   2          // 30.0k Ohm and 10.0k Ohm are resistors in the circuit
  45   2          // |ADSYS|ACSYS|PAYLOAD|DEPLOYM|
  46   2          g_us_LOAD_V[(i + 2) % 4] = (pin_mv[i][3] * (30.0 + 10.0) / 10.0) + fm_Calibration.PS_5_OFFSET_CORR[(i 
             -+ 2) % 4]; // HK VALUE *4*(VREFD_mV/4096)
  47   2        }
  48   1      
  49   1        for (i = 0; i < 4; i++) {
  50   2          // mV  ->  I HK VALUE *(1/(0.047*20))
  51   2          // 0.047 Ohm   is resistor through which the current goes, 20 is the gain amp of the voltage drop
  52   2          // |ADSYS|ACSYS|PAYLOAD|DEPLOYM|
C51 COMPILER V9.02   PWRS_HOUSEKEEPING                                                     12/28/2012 14:31:20 PAGE 2   

  53   2          g_us_LOAD_I[(i + 2) % 4] = (pin_mv[i][4] / (0.047 * 20)) + fm_Calibration.I_5V_OFFSET_CORR[(i + 2) % 4
             -]; // HK VALUE *4*(VREFD_mV/4096)
  54   2        }
  55   1      
  56   1        for (i = 0; i < 2; i++) {
  57   2          //   stage 1 30.0k Ohm and 10.0k Ohm are resistors in the voltage divider circuit
  58   2          //   stage 2 30.0k Ohm and 10.0k Ohm are resistors in the voltage divider circuit
  59   2          //   Thevenin equivalent resistance for first stage is 7.5
  60   2          // PWRS VALUE(used as HK VALUE in SDC mode 1)
  61   2          g_us_V_SDC[i] = (pin_mv[i + 6][3] * ((30.0 + 10.0) / 30.0) * ((10.0 + 30.0 + 7.5) / 10.0)) + fm_Calibr
             -ation.V_SDC_OFFSET_CORR[i];
  62   2        }
  63   1      
  64   1        for (i = 0; i < 2; i++) {
  65   2          // mV  ->  T
  66   2          // TODO check where +50 is added
  67   2          g_uc_BATT_TEMP_RAW[i] = LM94022_decodeTemperature(pin_mv[i][5]) + fm_Calibration.BATT_TEMP_OFFSET_CORR
             -[i]; //HK VALUE
  68   2        }
  69   1      
  70   1        for (i = 0; i < 2; i++) {
  71   2          // page 118
  72   2          // The op-amp gain is 1/2 in voltage divider. so the 2 compensates the factor
  73   2          g_us_BATT_V[i] = pin_mv[i][6] * 2 + fm_Calibration.V_CELL_OFFSET_CORR[i]; // PWRS VALUE(used as HK VAL
             -UE in SDC mode 1)
  74   2        }
  75   1      
  76   1        g_us_I_BATT_REF = pin_mv[2][5] + fm_Calibration.I_BATT_REF_OFFSET_CORR; // Used for PWRS Calculation for
             - g_ss_BATT_I(HK VALUE)
  77   1        //BATT CURRENT, from dual direction current sensor
  78   1      
  79   1        // 0.022 Ohm sensing resistor and 20 internal gain.
  80   1        g_s_BATT_I = (g_us_I_BATT_REF - pin_mv[3][5]) * (1.0 / (0.022 * 20)) + fm_Calibration.I_BATT_OFFSET_CORR
             -;
  81   1      
  82   1        // 300.0k Ohm and 100.0k Ohm are resistors in the circuit
  83   1        g_us_V_BATT = pin_mv[2][6] * (100.0 + 300.0) / 100.0 + fm_Calibration.V_BATT_OFFSET_CORR; // PWRS VALUE 
             -*4*(VREFD_mV/4086)
  84   1        // 300.0k Ohm and 100.0k Ohm are resistors in the circuit
  85   1        g_us_V_SYS = pin_mv[3][6] * (100.0 + 300.0) / 100.0 + fm_Calibration.V_SYS_OFFSET_CORR; // PWRS VALUE *4
             -*(VREFD_mV/4086)
  86   1      
  87   1        // 68.0k Ohm and 33.0k Ohm are resistors in the circuit
  88   1        g_us_PP_3V3 = pin_mv[3][0] * (68.0 + 33.0) / 68.0 + fm_Calibration.PP_3V3_OFFSET_CORR; // PWRS VALUE *(1
             -01/68)*(VREFD_mV/4096)
  89   1      
  90   1        // 300.0k Ohm and 100.0k Ohm are resistors in the circuit
  91   1        g_us_PS_UNREG = pin_mv[3][1] * (100.0 + 300.0) / 100.0 + fm_Calibration.PS_UNREG_OFFSET_CORR; // PWRS VA
             -LUE *4*(VREFD_mV/4096)
  92   1      
  93   1        //   stage 1 30.0k Ohm and 30.0k Ohm are resistors in the voltage divider circuit
  94   1        //   stage 2 30.0k Ohm and 10.0k Ohm are resistors in the voltage divider circuit
  95   1        //   Thevenin equivalent resistance for first stage is 15
  96   1        g_us_V_PS_COMM = pin_mv[4][3] * ((30.0 + 30.0) / 30.0) * ((10.0 + 30.0 + 15.0) / 10.0) + fm_Calibration.
             -V_PS_COMM_OFFSET_CORR; // PWRS VALUE
  97   1      
  98   1      // 0.047 Ohm sensing resistor and 20 internal gain.
  99   1        g_us_I_PS_COMM = pin_mv[4][4] * (1.0 / (0.047 * 20)) + fm_Calibration.I_PS_COMM_OFFSET_CORR; // PWRS VAL
             -UE *(1/(0.047*20))*(VREFD_mV/4096)
 100   1      
 101   1        // 300.0k Ohm and 100.0k Ohm are resistors in the circuit
 102   1        g_us_V_3V3_PAYL = pin_mv[5][3] * (100.0 + 300.0) / 100.0 + fm_Calibration.V_3V3_PAYL_OFFSET_CORR; // PWR
C51 COMPILER V9.02   PWRS_HOUSEKEEPING                                                     12/28/2012 14:31:20 PAGE 3   

             -S VALUE *4*(VREFD_mV/4096)
 103   1      
 104   1        g_us_OBDH_SENSE = pin_mv[5][4] + fm_Calibration.OBDH_SENSE_OFFSET_CORR; // PWRS VALUE
 105   1      
 106   1        // 0.047 Ohm sensing resistor and 20 internal gain.
 107   1        g_us_SYS_I = pin_mv[6][4] * (1.0 / (0.047 * 20)) + fm_Calibration.SYS_I_OFFSET_CORR; // HK VALUE *(1/(0.
             -047*20))*(VREFD_mV/4096)
 108   1      
 109   1        // THIS SECTION UPDATES HK VALUES NOT DIRECTLY RETRIEVED FROM MUX INPUT (12 Values)
 110   1      
 111   1        //MCU TEMP
 112   1        g_s_PWRS_MCU_TEMP = Mcutemp_inCelsius();
 113   1      
 114   1        //PCC_V
 115   1        if (g_uc_5V_SDC_STATUS == 2) //if SDC mode 2
 116   1          g_us_PCC_V = g_us_V_SDC[1];
 117   1        else
 118   1          // else must be SDC mode 1
 119   1          g_us_PCC_V = g_us_V_SDC[0];
 120   1      
 121   1        // TODO only temporary
 122   1        g_ul_PWRS_I2C_WDT = Timertask_timeUntilExecution(&g_str_PWRS_I2C_WDT);
 123   1      }
 124          
 125          void Housekeeping_getInternal() {
 126   1      
 127   1        g_uc_RAID_ADDRESS[0] = Raid_getAddressLo();
 128   1        g_uc_RAID_ADDRESS[1] = Raid_getAddressHi();
 129   1      
 130   1        Raid_readChars(0, g_uc_RAID_CONTENT, sizeof g_uc_RAID_CONTENT);
 131   1      
 132   1        g_uc_TIMER3_COUNT = SMBus_timer3Counter;
 133   1      
 134   1        SFR_pushPage(LEGACY_PAGE);
 135   1        g_uc_RST_CAUSE = RSTSRC; //update last RESET source
 136   1        SFR_popPage();
 137   1      }
 138          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2257    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    257    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
