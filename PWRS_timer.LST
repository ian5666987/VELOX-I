C51 COMPILER V9.02   PWRS_TIMER                                                            12/28/2012 23:30:43 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE PWRS_TIMER
OBJECT MODULE PLACED IN PWRS_timer.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE PWRS_timer.c LARGE OPTIMIZE(0,SIZE) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael
   2          
   3          #include <c8051F120.h>
   4          #include "PWRS_timer.h"
   5          #include "system_config.h"
   6          
   7          sfr16 RCAP2 = 0xCA; //Timer 2 reload register
   8          sfr16 TMR2 = 0xCC; //Timer 2 register
   9          
  10          sfr16 RCAP4 = 0xCA; //Timer 4 reload register
  11          sfr16 TMR4 = 0xCC; //Timer 4 register
  12          
  13          char timer0_reload_hi;
  14          char timer0_reload_lo;
  15          
  16          void Timer0_setReload() {
  17   1        char SFRPAGE_SAVE = SFRPAGE;
  18   1        SFRPAGE = TIMER01_PAGE;
  19   1      
  20   1        TH0 = timer0_reload_hi;
  21   1        TL0 = timer0_reload_lo;
  22   1        SFRPAGE = SFRPAGE_SAVE;
  23   1      }
  24          
  25          // Timer 0 Initialisation
  26          
  27          // Return Value : None
  28          // Parameters   : None
  29          //
  30          // This function configures the Timer0 as a 16-bit timer, interrupt enabled.
  31          // Using the Ext osc. at 28636360Hz or INT osc at 24.5MHz (for prescaling, refer to
  32          // definitions at top of script)
  33          //
  34          // Timer0 will overflow every 1ms, triggering ISR
  35          //
  36          // Note: The Timer0 uses a 1:4 prescaler.  If this setting changes, the
  37          // TIMER_PRESCALER constant must also be changed.
  38          
  39          void Timer0_init(char p_c_CKCON) {
  40   1        //Save Current SFR page
  41   1        char SFRPAGE_SAVE = SFRPAGE;
  42   1      
  43   1        timer0_reload_hi = 0xFB;//timer0_reload;
  44   1        timer0_reload_lo = 0xFB;//timer0_reload;
  45   1      
  46   1      
  47   1        Timer0_setReload();
  48   1      
  49   1        //Set SFR page
  50   1        SFRPAGE = TIMER01_PAGE;
  51   1      
  52   1        //TMOD: Timer Mode Register
  53   1        //Bit 7: GATE1: Timer 1 Gate Control.
  54   1        //0: Timer 1 enabled when TR1 = 1 irrespective of INT1_N logic level.
  55   1        //1: Timer 1 enabled only when TR1 = 1 AND INT1_N = logic 1.
C51 COMPILER V9.02   PWRS_TIMER                                                            12/28/2012 23:30:43 PAGE 2   

  56   1      
  57   1        //Bit 6: C/T1: Counter/Timer 1 Select.
  58   1        //0: Timer Function: Timer 1 incremented by clock defined by T1M bit (CKCON.4).
  59   1        //1: Counter Function: Timer 1 incremented by high-to-low transitions on external input pin (T1).
  60   1      
  61   1        //Bits 5–4: T1M1–T1M0: Timer 1 Mode Select.
  62   1        //These bits select the Timer 1 operation mode.
  63   1        //T1M1  T1M0  Mode
  64   1        //0   0   Mode 0: 13-bit counter/timer
  65   1        //0   1   Mode 1: 16-bit counter/timer
  66   1        //1   0   Mode 2: 8-bit counter/timer with auto-reload
  67   1        //1   1   Mode 3: Timer 1 inactive
  68   1      
  69   1        //Bit 3: GATE0: Timer 0 Gate Control.
  70   1        //0: Timer 0 enabled when TR0 = 1 irrespective of /INT0 logic level.
  71   1        //1: Timer 0 enabled only when TR0 = 1 AND /INT0 = logic 1.
  72   1      
  73   1        //Bit 2: C/T0: Counter/Timer Select.
  74   1        //0: Timer Function: Timer 0 incremented by clock defined by T0M bit (CKCON.3).
  75   1        //1: Counter Function: Timer 0 incremented by high-to-low transitions on external input pin (T0).
  76   1      
  77   1        //Bits 1–0: T0M1–T0M0: Timer 0 Mode Select.
  78   1        //These bits select the Timer 0 operation mode.
  79   1        //T0M1  T0M0  Mode
  80   1        //0   0   Mode 0: 13-bit counter/timer
  81   1        //0   1   Mode 1: 16-bit counter/timer
  82   1        //1   0   Mode 2: 8-bit counter/timer with auto-reload
  83   1        //1   1   Mode 3: Two 8-bit counter/timers
  84   1      
  85   1        //Timer0 in 16-bit mode
  86   1        TMOD &= 0xF0;
  87   1        TMOD |= 0x02;
  88   1      
  89   1        //CKCON : Clock Control
  90   1        //Bits 7–5: UNUSED. Read = 000b, Write = don’t care.
  91   1        //Bit 4: T1M: Timer 1 Clock Select.
  92   1        //This select the clock source supplied to Timer 1. T1M is ignored when C/T1 is set to logic 1.
  93   1        //0: Timer 1 uses the clock defined by the prescale bits, SCA1–SCA0.
  94   1        //1: Timer 1 uses the system clock.
  95   1        //Bit 3: T0M: Timer 0 Clock Select.
  96   1        //This bit selects the clock source supplied to Timer 0. T0M is ignored when C/T0 is set to logic 1.
  97   1        //0: Counter/Timer 0 uses the clock defined by the prescale bits, SCA1-SCA0.
  98   1        //1: Counter/Timer 0 uses the system clock.
  99   1        //Bit 2: UNUSED. Read = 0b, Write = don’t care.
 100   1        //Bits 1–0: SCA1–SCA0: Timer 0/1 Prescale Bits
 101   1        //These bits control the division of the clock supplied to Timer 0 and/or Timer 1 if configured to use p
             -rescaled clock inputs.
 102   1        //SCA1  SCA0  Prescaled Clock
 103   1        //0   0   System clock divided by 12
 104   1        //0   1   System clock divided by 4
 105   1        //1   0   System clock divided by 48
 106   1        //1   1   External clock divided by 8
 107   1      
 108   1        //Timer0 uses a 1:4 prescaler   (after 2012-oct-17)
 109   1        CKCON = p_c_CKCON;
 110   1      
 111   1        //Timer0 interrupt enabled
 112   1        ET0 = 0;
 113   1      //  IP |= 0x02; // set timer 0 overflow high priority
 114   1      
 115   1        //  SFR Definition 23.1. TCON: Timer Control
 116   1        //  Bit7: TF1: Timer 1 Overflow Flag.
C51 COMPILER V9.02   PWRS_TIMER                                                            12/28/2012 23:30:43 PAGE 3   

 117   1        //  Set by hardware when Timer 1 overflows. This flag can be cleared by software but is automatically
 118   1        //  cleared when the CPU vectors to the Timer 1 interrupt service routine.
 119   1        //  0: No Timer 1 overflow detected.
 120   1        //  1: Timer 1 has overflowed.
 121   1      
 122   1        //  Bit6: TR1: Timer 1 Run Control.
 123   1        //  0: Timer 1 disabled.
 124   1        //  1: Timer 1 enabled.
 125   1      
 126   1        //  Bit5: TF0: Timer 0 Overflow Flag.
 127   1        //  Set by hardware when Timer 0 overflows. This flag can be cleared by software but is automatically
 128   1        //  cleared when the CPU vectors to the Timer 0 interrupt service routine.
 129   1        //  0: No Timer 0 overflow detected.
 130   1        //  1: Timer 0 has overflowed.
 131   1      
 132   1        //  Bit4: TR0: Timer 0 Run Control.
 133   1        //  0: Timer 0 disabled.
 134   1        //  1: Timer 0 enabled.
 135   1      
 136   1        //  Bit3: IE1: External Interrupt 1.
 137   1        //  This flag is set by hardware when an edge/level of type defined by IT1 is detected. It can be
 138   1        //  cleared by software but is automatically cleared when the CPU vectors to the External Interrupt
 139   1        //  1 service routine if IT1 = 1. This flag is the inverse of the /INT1 signal.
 140   1      
 141   1        //  Bit2: IT1: Interrupt 1 Type Select.
 142   1        //  This bit selects whether the configured /INT1 interrupt will be falling-edge sensitive or
 143   1        //  active-low.
 144   1        //  0: /INT1 is level triggered, active-low.
 145   1        //  1: /INT1 is edge triggered, falling-edge.
 146   1      
 147   1        //  Bit1: IE0: External Interrupt 0.
 148   1        //  This flag is set by hardware when an edge/level of type defined by IT0 is detected. It can be
 149   1        //  cleared by software but is automatically cleared when the CPU vectors to the External Interrupt
 150   1        //  0 service routine if IT0 = 1. This flag is the inverse of the /INT0 signal.
 151   1      
 152   1        //  Bit0: IT0: Interrupt 0 Type Select.
 153   1        //  This bit selects whether the configured /INT0 interrupt will be falling-edge sensitive or
 154   1        //  active-low.
 155   1        //  0: /INT0 is level triggered, active logic-low.
 156   1        //  1: /INT0 is edge triggered, falling-edge.
 157   1      
 158   1        //Timer0 ON
 159   1        TR0 = 1;
 160   1      
 161   1        //Restore SFR page
 162   1        SFRPAGE = SFRPAGE_SAVE;
 163   1      }
 164          
 165          //-----------------------------------------------------------------------------
 166          // Timer 1 Initialisation
 167          
 168          // Return Value : None
 169          // Parameters   : None
 170          //
 171          // This function configures the Timer1 as a 16-bit timer, interrupt disabled, T1 pin not used
 172          // and timer itself is disabled
 173          //
 174          //-----------------------------------------------------------------------------
 175          
 176          void Timer1_init(long sys_clk, char prescaler) {
 177   1      //Save Current SFR page
 178   1        char SFRPAGE_SAVE = SFRPAGE;
C51 COMPILER V9.02   PWRS_TIMER                                                            12/28/2012 23:30:43 PAGE 4   

 179   1        char timer1_reload_hi;
 180   1      //Set SFR page
 181   1        SFRPAGE = TIMER01_PAGE; //Timer 0 or 1 page
 182   1        timer1_reload_hi = (float)sys_clk / prescaler / BAUDRATE_1 / 2 + 0.5;
 183   1        TH1 = -(timer1_reload_hi); //Setting reload value
 184   1      
 185   1        //Timer1 in 8-bit mode
 186   1        TMOD &= 0x0F;
 187   1        TMOD |= 0x20;
 188   1      
 189   1        //Timer1 uses a 1:4 prescaler
 190   1      //  CKCON &= 0xEF;
 191   1      //  CKCON |= 0x00;
 192   1      
 193   1        //Timer1 interrupt disabled
 194   1        ET1 = 0;
 195   1        //IP |= 0x08; // set timer 1 overflow high priority
 196   1      
 197   1        //Timer1 ON
 198   1        TR1 = 1;
 199   1      //
 200   1      //  //Restore SFR page
 201   1        SFRPAGE = SFRPAGE_SAVE;
 202   1      }
 203          
 204          //-----------------------------------------------------------------------------
 205          // Timer2_Init
 206          //-----------------------------------------------------------------------------
 207          //
 208          // Return Value : None
 209          // Parameters   : None
 210          //
 211          // funtion: auto reload mode with no interrupt, not running
 212          //-----------------------------------------------------------------------------
 213          
 214          void Timer2_init(long sys_clk) {
 215   1      
 216   1        char SFRPAGE_SAVE = SFRPAGE; // Save Current SFR page
 217   1        SFRPAGE = TMR2_PAGE;
 218   1        TMR2CN = 0x00; // Timer2 external enable off;
 219   1                       // Timer2 in timer mode;
 220   1        // Transactions on T2EX ignored
 221   1        // Timer2 in auto-reload mode
 222   1        TMR2CF = 0x08; // Timer2 uses sysclk
 223   1                       // Timer2 output not available on pin T2
 224   1                       // Timer2 counts up
 225   1        RCAP2 = -(sys_clk/1000); // Timer2 dummy value
 226   1        TMR2 = RCAP2; // ~25ms (for SMBus low timeout detect)
 227   1        ET2 = 1; // disable timer 2 interrupt
 228   1        TR2 = 1; // do not start Timer2
 229   1        SFRPAGE = SFRPAGE_SAVE; // Restore SFR page detector
 230   1      
 231   1      }
 232          
 233          
 234          //-----------------------------------------------------------------------------
 235          // Timer4_Init()
 236          //-----------------------------------------------------------------------------
 237          //
 238          // Return Value : None
 239          // Parameters   : None
 240          //
C51 COMPILER V9.02   PWRS_TIMER                                                            12/28/2012 23:30:43 PAGE 5   

 241          // Used for UART0 baudrate generator
 242          //-----------------------------------------------------------------------------
 243          
 244          void Timer4_init(long sys_clk) {
 245   1        //Save current SFR page
 246   1        char SFRPAGE_SAVE = SFRPAGE;
 247   1        short timer4_reload;
 248   1      
 249   1        //Switch to Timer 4
 250   1        SFRPAGE = TMR4_PAGE;
 251   1      
 252   1        //Timer 4 in 16-bit auto-reload up timer mode
 253   1        TMR4CN = 0x00;
 254   1      
 255   1        //SYSCLK is time base; no output, up count only
 256   1        TMR4CF = 0x08;
 257   1        timer4_reload = (float)sys_clk / BAUDRATE_0 / 16 + 0.5;
 258   1        RCAP4 = -(timer4_reload);
 259   1      
 260   1        TMR4 = RCAP4;
 261   1      
 262   1        EIE2 &= 0xFB; //to disble T4 int, added by SWL 19 Mar 12
 263   1        //Start Timer 4
 264   1        TR4 = 1;
 265   1      
 266   1        //Restore SFRPAGE
 267   1        SFRPAGE = SFRPAGE_SAVE;
 268   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    391    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
