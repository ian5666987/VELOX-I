C51 COMPILER V9.02   VELOX_RAID                                                            01/27/2013 21:19:11 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE VELOX_RAID
OBJECT MODULE PLACED IN Velox_raid.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Velox_raid.c LARGE OPTIMIZE(0,SIZE) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by charlin
   2          
   3          #include "C8051_scratchpad.h"
   4          
   5          #include "Velox_eeprom.h"
   6          #include "Velox_raid.h"
   7          
   8          // FIXME "what if EEPROM spoiled (power pin gone etc...)" BX
   9          
  10          // only default value, should be modified via Raid_init():
  11          short raid_size = 128 * 0x100;
  12          
  13          enum enum_raid_simulate_failure RAID_simulateFailure = raid_failure_off;
  14          
  15          // call with 0<pages && pages <= 128
  16          void Raid_init(char pages) {
  17   1        Raid_resetScratchPad(0);
  18   1        raid_size = pages * (short) 0x100;
  19   1        Raid_setSimulateFailure(raid_failure_off);
  20   1        Raid_readChars(0, 0, 0);
  21   1        Raid_writeChars(0, 0, 0);
  22   1      }
  23          
  24          unsigned char Raid_getAddressLo() {
  25   1        return FLASH_ByteRead(RAID_SCRATCHPAD_ADDR_LO, 1);
  26   1      }
  27          
  28          unsigned char Raid_getAddressHi() {
  29   1        return FLASH_ByteRead(RAID_SCRATCHPAD_ADDR_HI, 1);
  30   1      }
  31          
  32          // TODO for safety check if parameter is between 0 and raid_size
  33          char Raid_read(short address) {
  34   1        long l_l_offset;
  35   1        unsigned char l_uc_page_num = Raid_getAddressLo(); //FLASH_ByteRead(SCRATCHPAD_ADDR_page_num1, 1);
  36   1      
  37   1        l_l_offset = l_uc_page_num * (long) raid_size + address;
  38   1        return EEPROM_Read(l_l_offset);
  39   1      }
  40          
  41          void Raid_setSimulateFailure(enum enum_raid_simulate_failure failure_id) {
  42   1        RAID_simulateFailure = failure_id;
  43   1      }
  44          
  45          // Parameters   : 1. address - the destination EEPROM address
  46          //                   range: 0 to EEPROM_CAPACITY
  47          //                2. value - the value to write.
  48          //                   range: 0x00 to 0xFF
  49          // Return Value : None
  50          //
  51          // Writes one byte to the specified address in the EEPROM. This function polls
  52          // the EEPROM status register after the write operation, and returns only after
  53          // the status register indicates that the write cycle is complete. This is to
  54          // prevent from having to check the status register before a read operation.
  55          // This function saves and restores SFRPAGE.
C51 COMPILER V9.02   VELOX_RAID                                                            01/27/2013 21:19:11 PAGE 2   

  56          
  57          // TODO for safety check if parameter is between 0 and raid_size
  58          // the scratchpad is set to 0xff after each act of propram flashing
  59          void Raid_resetScratchPad(char force) {
  60   1        if (force || FLASH_ByteRead(RAID_SCRATCHPAD_ADDR_LO, 1) == 0xff) {
  61   2          FLASH_PageErase(RAID_SCRATCHPAD_ADDR_LO, 1);
  62   2          FLASH_ByteWrite(RAID_SCRATCHPAD_ADDR_LO, 0, 1);
  63   2        }
  64   1        if (force || FLASH_ByteRead(RAID_SCRATCHPAD_ADDR_HI, 1) == 0xff) {
  65   2          FLASH_PageErase(RAID_SCRATCHPAD_ADDR_HI, 1);
  66   2          FLASH_ByteWrite(RAID_SCRATCHPAD_ADDR_HI, 0, 1);
  67   2        }
  68   1      }
  69          
  70          char Raid_write(short address, char value) {
  71   1        short i;
  72   1        long l_l_offset1;
  73   1        long l_l_offset2;
  74   1        unsigned char l_uc_page_num1;
  75   1        unsigned char l_uc_page_num2;
  76   1        unsigned long p_ul_address1;
  77   1        unsigned long p_ul_address2;
  78   1      
  79   1        l_uc_page_num1 = Raid_getAddressLo();
  80   1        l_l_offset1 = l_uc_page_num1 * (long) raid_size;
  81   1        p_ul_address1 = l_l_offset1 + address;
  82   1      
  83   1        l_uc_page_num2 = Raid_getAddressHi();
  84   1        l_l_offset2 = 0x20000 - l_uc_page_num2 * (long) raid_size - raid_size;
  85   1        p_ul_address2 = l_l_offset2 + address;
  86   1      
  87   1        EEPROM_Write(p_ul_address1, value);
  88   1        EEPROM_Write(p_ul_address2, value);
  89   1      
  90   1        if (value != EEPROM_Read(p_ul_address1) || RAID_simulateFailure == raid_failure_lo) {
  91   2          ++l_uc_page_num1;
  92   2          FLASH_PageErase(RAID_SCRATCHPAD_ADDR_LO, 1);
  93   2          FLASH_ByteWrite(RAID_SCRATCHPAD_ADDR_LO, l_uc_page_num1, 1);
  94   2          l_l_offset1 = l_uc_page_num1 * (long) raid_size;
  95   2          RAID_simulateFailure = raid_failure_off;
  96   2          for (i = 0; i < raid_size; i++)
  97   2            EEPROM_Write(l_l_offset1 + i, EEPROM_Read(l_l_offset2 + i));
  98   2        }
  99   1      
 100   1        if (value != EEPROM_Read(p_ul_address2) || RAID_simulateFailure == raid_failure_hi) {
 101   2          ++l_uc_page_num2;
 102   2          FLASH_PageErase(RAID_SCRATCHPAD_ADDR_HI, 1);
 103   2          FLASH_ByteWrite(RAID_SCRATCHPAD_ADDR_HI, l_uc_page_num2, 1);
 104   2          l_l_offset2 = 0x20000 - l_uc_page_num2 * (long) raid_size - raid_size;
 105   2          RAID_simulateFailure = raid_failure_off;
 106   2          for (i = 0; i < raid_size; i++)
 107   2            EEPROM_Write(l_l_offset2 + i, EEPROM_Read(l_l_offset1 + i));
 108   2        }
 109   1        return 1; // FIXME
 110   1      }
 111          
 112          // starting from p_s_address this func reads p_s_length bytes
 113          // into p_c_message (as char array)
 114          char Raid_readChars(short address, void* message, short length) {
 115   1        short c0;
 116   1        char* l_c_message = (char*) message;
 117   1        for (c0 = 0; c0 < length; c0++) {
C51 COMPILER V9.02   VELOX_RAID                                                            01/27/2013 21:19:11 PAGE 3   

 118   2          l_c_message[c0] = Raid_read(address);
 119   2          ++address;
 120   2        }
 121   1        return 1; // success FIXME
 122   1      }
 123          
 124          char Raid_writeChars(short address, void* message, short length) {
 125   1        short c0;
 126   1        char* l_c_message = (char*) message;
 127   1        for (c0 = 0; c0 < length; c0++) {
 128   2          Raid_write(address, l_c_message[c0]);
 129   2          ++address;
 130   2        }
 131   1        return 1; // success FIXME
 132   1      }
 133          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1329    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     60    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
