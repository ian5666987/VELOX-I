C51 COMPILER V9.02   PWRS_MPPT                                                             12/28/2012 14:31:20 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE PWRS_MPPT
OBJECT MODULE PLACED IN PWRS_mppt.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE PWRS_mppt.c LARGE OPTIMIZE(0,SIZE) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael maintained by BX
   2          
   3          #include <c8051F120.h>
   4          #include "C8051_pca0.h"
   5          #include "Velox_sfrstack.h"
   6          #include "PWRS_constant.h"
   7          #include "PWRS_main.h"
   8          #include "PWRS_extern_data.h"
   9          #include "PWRS_fault_handling.h"
  10          #include "PWRS_port.h"
  11          #include "PWRS_mppt.h"
  12          
  13          // Maximum Point Power Tracking using Boost Converter
  14          // Mode 0: Fixed Timer IC
  15          // Mode 1: Algorithm used: P&O - > uc_PV_channel (0 to 2): The PV input channel the algorithm will execute
             -d
  16          // Mode 2: Fixed PV voltage -> Eqn : Vout / Vd = 1 / (1 - D) ; D =  1 - Vd/Vout
  17          // Mode 3: Algorithm used: MPPT without current sensor
  18          void Mppt_tracking(unsigned char PV_channel) {
  19   1      
  20   1         // Obtain Power of PV input
  21   1        PVInput[PV_channel].current.g_ul_V = g_us_PV_V[PV_channel];
  22   1        PVInput[PV_channel].g_ul_I = g_us_PV_I[PV_channel]; //TODO able to use PVInput[PV_channel].g_ul_I
  23   1      
  24   1        switch (g_uc_MPPT_MODE) {
  25   2        case P_and_O:
  26   2      
  27   2          PVInput[PV_channel].current.g_ul_P = (PVInput[PV_channel].current.g_ul_V * PVInput[PV_channel].g_ul_I)
             - / 1000; //Convert from mW to W
  28   2      
  29   2          //-------Start of P&O algorithm-------//
  30   2          //Check to ensure that battery voltage does not exceed Vsys_max
  31   2          if (g_us_V_SYS > g_us_VSYS_MAX) {
  32   3            PVInput[PV_channel].g_uc_PWM /= 2;
  33   3          } else {
  34   3            PVInput[PV_channel].g_l_dP = PVInput[PV_channel].current.g_ul_P - PVInput_old[PV_channel].g_ul_P; //
             -dP=P(k)-P(k-1)
  35   3            PVInput[PV_channel].current.g_l_dV = PVInput[PV_channel].current.g_ul_V - PVInput_old[PV_channel].g_
             -ul_V; //dV=V(k)-V(k-1)
  36   3      
  37   3            PVInput[PV_channel].g_uc_PWM -= (signum(PVInput[PV_channel].g_l_dP) * signum(PVInput[PV_channel].cur
             -rent.g_l_dV)) * g_uc_MPPT_STEP;
  38   3            // Limit duty cycle to 35% and 80%
  39   3            PVInput[PV_channel].g_uc_PWM = min(max(90, PVInput[PV_channel].g_uc_PWM), 204);
  40   3            PVInput_old[PV_channel] = PVInput[PV_channel].current;
  41   3          }
  42   2          //Select which PV channel PWM is adjusted
  43   2          if ((PV_channel >= 0) && (PV_channel < 3))
  44   2            PCA0_setDutyCycle(PV_channel, PVInput[PV_channel].g_uc_PWM);
  45   2          break;
  46   2      
  47   2        case fv_userdefined:
  48   2          //this functions approximates the PWM duty cycle
  49   2          PVInput[PV_channel].g_uc_PWM = (1.0 - (float)PVInput[PV_channel].g_us_PV_FV / max(1,g_us_V_SYS)) * 255
             -.0;
C51 COMPILER V9.02   PWRS_MPPT                                                             12/28/2012 14:31:20 PAGE 2   

  50   2          if (0 <= PV_channel && PV_channel < 3)
  51   2            PCA0_setDutyCycle(PV_channel, PVInput[PV_channel].g_uc_PWM);
  52   2          break;
  53   2      
  54   2        case Vmppt:
  55   2          if (g_us_V_SYS > g_us_VSYS_MAX) {
  56   3            PVInput[PV_channel].g_uc_PWM /= 2;
  57   3          } else {
  58   3            PVInput[PV_channel].current.g_l_dV = PVInput[PV_channel].current.g_ul_V - PVInput_old[PV_channel].g_
             -ul_V; //dV=V(k)-V(k-1)
  59   3            if (PVInput[PV_channel].current.g_l_dV < 0) {
  60   4              PVInput[PV_channel].current.g_l_dV = -PVInput[PV_channel].current.g_l_dV;
  61   4            }
  62   3            // TODO test
  63   3            PVInput[PV_channel].g_uc_PWM -= g_uc_MPPT_STEP * signum(PVInput[PV_channel].current.g_l_dV - PVInput
             -_old[PV_channel].g_l_dV);
  64   3            PVInput[PV_channel].g_uc_PWM = min(max(51,PVInput[PV_channel].g_uc_PWM),204);
  65   3            //if smaller than 20% set to 20% if greater than 80% set to 80%
  66   3            PVInput_old[PV_channel] = PVInput[PV_channel].current;
  67   3            //Select which PV channel PWM is adjusted
  68   3            if ((PV_channel >= 0) && (PV_channel < 3))
  69   3              PCA0_setDutyCycle(PV_channel, PVInput[PV_channel].g_uc_PWM);
  70   3          }
  71   2          break;
  72   2      
  73   2        default: //mppt = mode 0 or fault
  74   2          break;
  75   2        }
  76   1      }
  77          
  78          // Set mode for PV input boost converter
  79          // Parameters   : MPPT_MODE 0: Fixed constant voltage point by timer IC
  80          //          MPPT_MODE 1: Perturb and Observe
  81          //          MPPT_MODE 2: Fixed constant voltage point define by user
  82          void Mppt_setMode(enum enum_mppt_mode mppt_mode) {
  83   1        unsigned char x;
  84   1      
  85   1        SFR_pushPage(CONFIG_PAGE);
  86   1      
  87   1        g_uc_MPPT_MODE = mppt_mode;
  88   1      
  89   1        switch (mppt_mode) {
  90   2        case fv_timer_555: //Fixed constant voltage by timer IC
  91   2          PWM_SEL_1 = 1;
  92   2          PWM_SEL_2 = 0;
  93   2          break;
  94   2      
  95   2        case P_and_O: //P&O
  96   2        case Vmppt: //VMPPT
  97   2          //set initial P and O PWM duty cycle to be 50%
  98   2          for (x = 0; x < PVInput_NumEl; x++) {
  99   3            PVInput[x].g_uc_PWM = g_uc_INITIAL_MPPT_PWM_DUTY_CYCLE;
 100   3          }
 101   2      
 102   2          PWM_SEL_1 = 0;
 103   2          PWM_SEL_2 = 1;
 104   2          break;
 105   2      
 106   2        case fv_userdefined: //Fixed constant voltage define by user
 107   2          //this functions approx the starting PWM duty cycle
 108   2      
 109   2          PWM_SEL_1 = 0;
C51 COMPILER V9.02   PWRS_MPPT                                                             12/28/2012 14:31:20 PAGE 3   

 110   2          PWM_SEL_2 = 1;
 111   2          break;
 112   2      
 113   2        default:
 114   2          g_uc_MPPT_MODE = invalid_mppt_mode; // update MPPT_MODE. MPPT_MODE is 9 shows invalid MPPT mode
 115   2          // TODO check if this results in the desired default behavior:
 116   2          PWM_SEL_1 = 1;
 117   2          PWM_SEL_2 = 0;
 118   2          break;
 119   2        }
 120   1      
 121   1        SFR_popPage();
 122   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1935    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
