C51 COMPILER V9.02   C8051_UART1                                                           05/20/2014 11:03:51 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE C8051_UART1
OBJECT MODULE PLACED IN C8051_uart1.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE C8051_uart1.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael
   2          // adapted from CodeVision AVR by HP
   3          
   4          #define interrupt(x) interrupt x
   5          
   6          #include <c8051f120.h>
   7          #include "C8051_UART1.h"
   8          
   9           // ?? not sure, no numbers given: expected minimum of 9600 baud rate. Timeout is twice of maximum time to
             - transfer one byte in the specified baudrate
  10          #define UART1_TX_TIMEOUT 2000 // was 1500 before
  11          
  12          // the buffer and buffer size are set in the open function and shall not
  13          // be changed until closing the uart
  14          char* UART1_rx;
  15          short UART1_rx_size;
  16          char* UART1_tx;
  17          short UART1_tx_size;
  18          
  19          // these are private variables managed by the uart
  20          short UART1_rx_uart = 0;
  21          short UART1_rx_main = 0;
  22          volatile short UART1_rx_available = 0;
  23          
  24          // uart1 has no specific error flag
  25          short UART1_tx_uart = 0;
  26          short UART1_tx_main = 0;
  27          volatile short UART1_tx_available = 0;
  28          
  29          //char UART1_rx_errorCount = 0; // n.a.
  30          char UART1_tx_errorCount = 0;
  31          
  32          void UART1_open(char* rx_buffer, short rx_size, char* tx_buffer, short tx_size) {
  33   1        char SFRPAGE_SAVE = SFRPAGE;
  34   1        UART1_rx = rx_buffer;
  35   1        UART1_rx_size = rx_size;
  36   1        UART1_tx = tx_buffer;
  37   1        UART1_tx_size = tx_size;
  38   1        UART1_close();
  39   1      
  40   1        SFRPAGE = UART1_PAGE;
  41   1      
  42   1        //SCON1 Register (UART1 Control)
  43   1        //Bit7:   S1MODE: Serial Port 1 Operation Mode:
  44   1        //Bit6:   Unused.
  45   1        //Bit5:   MCE1: Multiprocessor Communication Enable.
  46   1        //Bit4:   REN0: Receive Enable.
  47   1        //Bit1:   TI1: Transmit Interrupt Flag.
  48   1        //Bit0:   RI1: Receive Interrupt Flag.
  49   1        SCON1 = 0x10; //  0001 0000
  50   1      
  51   1        TI1 = 0; // TX ready
  52   1        RI1 = 0; // RX ready
  53   1        EIE2 |= 0x40; // Set ES1 UART1 interrupt  1 - enabled, 0 - disabled
  54   1      
C51 COMPILER V9.02   C8051_UART1                                                           05/20/2014 11:03:51 PAGE 2   

  55   1        SFRPAGE = SFRPAGE_SAVE;
  56   1      }
  57          
  58          void UART1_close() {
  59   1        char SFRPAGE_SAVE = SFRPAGE;
  60   1        SFRPAGE = UART1_PAGE;
  61   1        EIE2 &= 0xBF; // Set ES1 UART1 interrupt  1 - enabled, 0 - disabled
  62   1        TI1 = 0;
  63   1        RI1 = 0;
  64   1        UART1_rx_available = 0;
  65   1        UART1_tx_uart = 0;
  66   1        SFRPAGE = SFRPAGE_SAVE;
  67   1      }
  68          
  69          short UART1_getRxAvailable() {
  70   1        short value;
  71   1        char EIE2_SAVE = EIE2 & 0x40;
  72   1        EIE2 &= 0xBF; // Set ES1 = EIE2^6 UART1 interrupt  1 - enabled, 0 - disabled
  73   1        value = UART1_rx_available;
  74   1        EIE2 |= EIE2_SAVE;
  75   1        return value;
  76   1      }
  77          
  78          char UART1_pollChars(void* ptr, short length) {
  79   1        char* message = ptr;
  80   1        short count;
  81   1        if (length <= UART1_getRxAvailable()) {
  82   2          for (count = 0; count < length; ++count)
  83   2            message[count] = UART1_rx[(UART1_rx_main + count) % UART1_rx_size];
  84   2          return 1;
  85   2        }
  86   1        return 0;
  87   1      }
  88          
  89          void UART1_advance(short length) {
  90   1        char EIE2_SAVE = EIE2 & 0x40;
  91   1        EIE2 &= 0xBF; // Set ES1 = EIE2^6 UART1 interrupt  1 - enabled, 0 - disabled
  92   1        UART1_rx_available -= length;
  93   1        UART1_rx_main += length;
  94   1        UART1_rx_main %= UART1_rx_size;
  95   1        EIE2 |= EIE2_SAVE;
  96   1      }
  97          
  98          void UART1_putChar(unsigned char value) {
  99   1        char SFRPAGE_SAVE;
 100   1        char EIE2_SAVE;
 101   1        short delay = 0;
 102   1        // buffer is full, wait for the UART1 to transmit and free up buffer space (rather than discard)
 103   1        while (UART1_tx_size <= UART1_tx_available && delay < UART1_TX_TIMEOUT)
 104   1          ++delay;
 105   1        if (UART1_tx_size <= UART1_tx_available) {
 106   2          ++UART1_tx_errorCount;
 107   2          return;
 108   2        }
 109   1        // only comes here if UART1_tx_available < UART1_tx_size
 110   1        // ---
 111   1        EIE2_SAVE = EIE2 & 0x40;
 112   1        EIE2 &= 0xBF; // Set ES1 UART1 interrupt  1 - enabled, 0 - disabled
 113   1        if (UART1_tx_available) {
 114   2          UART1_tx[UART1_tx_main] = value; // Store in transmit array
 115   2          ++UART1_tx_main; // Update array's size
 116   2          // reach end of buffer! reset the pointer and the
C51 COMPILER V9.02   C8051_UART1                                                           05/20/2014 11:03:51 PAGE 3   

 117   2          //  while loop at the front will ensure that the UART1_tx_main will not run over  g_us_tx1_ptr
 118   2          if (UART1_tx_main == UART1_tx_size)
 119   2            UART1_tx_main = 0;
 120   2          ++UART1_tx_available; // Update counter
 121   2        } else {
 122   2          SFRPAGE_SAVE = SFRPAGE;
 123   2          SFRPAGE = UART1_PAGE;
 124   2          ++UART1_tx_available; // Update counter
 125   2          SBUF1 = value; // Straight away transmit, dun even need to put in tx buffer
 126   2          SFRPAGE = SFRPAGE_SAVE; //Restore the SFRPAGE
 127   2        }
 128   1        EIE2 |= EIE2_SAVE;
 129   1      }
 130          
 131          void UART1_putChars(void* ptr, short length) {
 132   1        short count;
 133   1        char* message = (char*) ptr;
 134   1        for (count = 0; count < length; ++count)
 135   1          UART1_putChar(message[count]);
 136   1      }
 137          
 138          UART1_ISR() interrupt (20) {
 139   1        if (RI1 == 1) {
 140   2          RI1 = 0;
 141   2          // data will be loaded in SBUF0 if
 142   2          // RI1 == 0 && (SM20 == 1 => StopBit == 1)
 143   2          UART1_rx[UART1_rx_uart] = SBUF1; //Read a character from UART1 Data Buffer
 144   2          ++UART1_rx_uart;
 145   2          if (UART1_rx_uart == UART1_rx_size)
 146   2            UART1_rx_uart = 0;
 147   2          ++UART1_rx_available;
 148   2          // we do not check if buffer overflow
 149   2        }
 150   1        if (TI1 == 1) { // cause of interrupt: previous tx is finished
 151   2          TI1 = 0;
 152   2          --UART1_tx_available; //Decrease array size
 153   2          if (UART1_tx_available) { //If buffer not empty
 154   3            SBUF1 = UART1_tx[UART1_tx_uart]; //Transmit
 155   3            ++UART1_tx_uart; //Update counter
 156   3            if (UART1_tx_uart == UART1_tx_size)
 157   3              UART1_tx_uart = 0;
 158   3          }
 159   2        }
 160   1      }
 161          
 162          char UART1_getTxErrorCount() {
 163   1        return UART1_tx_errorCount;
 164   1      }
 165          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1185    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     66    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
