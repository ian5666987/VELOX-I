C51 COMPILER V9.02   VELOX_EEPROM                                                          01/27/2013 21:20:12 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE VELOX_EEPROM
OBJECT MODULE PLACED IN Velox_eeprom.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Velox_eeprom.c LARGE OPTIMIZE(0,SIZE) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael
   2          
   3          #include <c8051f120.h>
   4          
   5          #include "C8051_delay.h"
   6          #include "C8051_SPI0.h"
   7          
   8          #include "Velox_sfrstack.h"
   9          #include "Velox_eeprom.h"
  10          
  11          // EEPROM Definition
  12          #define  EEPROM_RW_WIP_TIMEOUT 2000   //After testing, Aprox time is 90 - 95
  13          // EEPROM Instruction Set
  14          #define  EEPROM_CMD_READ   0x03        //Read Command
  15          #define  EEPROM_CMD_WRITE  0x02        //Write Command
  16          #define  EEPROM_CMD_WRDI   0x04        //Reset Write Enable Latch Command
  17          #define  EEPROM_CMD_WREN   0x06        //Set Write Enable Latch Command
  18          #define  EEPROM_CMD_RDSR   0x05        //Read Status Register Command
  19          #define  EEPROM_CMD_WRSR   0x01        //Write Status Register Command
  20          // ---
  21          
  22          // ---
  23          // Writes one byte to the specified address in the EEPROM. This function polls
  24          // the EEPROM status register after the write operation, and returns only after
  25          // the status register indicates that the write cycle is complete. This is to
  26          // prevent from having to check the status register before a read operation.
  27          // This function saves and restores SFRPAGE.
  28          char EEPROM_Write(long address, char value) {
  29   1        char success = 1;
  30   1        char message[5];
  31   1        short delay = 0;
  32   1        SFR_pushPage(SPI0_PAGE);
  33   1        // ---
  34   1        message[0] = EEPROM_CMD_WREN; //Step 1: Set the Write Enable Latch to 1
  35   1        NSSMD0 = 0; // Activate Slave Select
  36   1        SPI0_putGetChars(message, 1);
  37   1        NSSMD0 = 1; // Deactivate Slave Select
  38   1        Delay_us(1); // Step1.6: Wait for at least T_NSS_DISABLE_MIN
  39   1        // ---
  40   1        message[0] = EEPROM_CMD_WRITE; //Step 2: Send the WRITE command
  41   1        message[1] = address >> 16; // Step 2: Send the EEPROM source address (MSB first)
  42   1        message[2] = address >> 8;
  43   1        message[3] = address;
  44   1        message[4] = value;
  45   1        NSSMD0 = 0; // Activate Slave Select
  46   1        SPI0_putGetChars(message, sizeof message);
  47   1        NSSMD0 = 1; // deactivate slave select
  48   1        Delay_us(1);
  49   1        // ---
  50   1        do { // Poll on the Write In Progress (WIP) bit in Read Status Register
  51   2          NSSMD0 = 0; // Activate Slave Select
  52   2          message[0] = EEPROM_CMD_RDSR;
  53   2          message[1] = 0;
  54   2          SPI0_putGetChars(message, 2);
  55   2          NSSMD0 = 1; // Deactivate Slave Select after read
C51 COMPILER V9.02   VELOX_EEPROM                                                          01/27/2013 21:20:12 PAGE 2   

  56   2          if (EEPROM_RW_WIP_TIMEOUT < ++delay) {
  57   3            success = 0;
  58   3            break;
  59   3          }
  60   2        } while ((message[1] & 0x01) == 0x01);
  61   1        // ---
  62   1        SFR_popPage();
  63   1        return success;
  64   1      }
  65          
  66          // Reads one byte from the specified EEPROM address.
  67          // This function saves and restores SFRPAGE.
  68          char EEPROM_Read(long address) {
  69   1        char message[5];
  70   1        message[0] = EEPROM_CMD_READ; // Step 1: Send the READ command
  71   1        message[1] = address >> 16; // Step 2: Send the EEPROM source address (MSB first)
  72   1        message[2] = address >> 8;
  73   1        message[3] = address;
  74   1        message[4] = 0; // Step 3: Read the value returned
  75   1        SFR_pushPage(SPI0_PAGE);
  76   1        NSSMD0 = 0; // Activate Slave Select
  77   1        SPI0_putGetChars(message, sizeof message);
  78   1        NSSMD0 = 1; // Deactivate Slave Select
  79   1        SFR_popPage();
  80   1        return message[4]; // last byte
  81   1      }
  82          
  83          //void EMIF_init() {
  84          //  SFR_pushPage(EMI0_PAGE);
  85          //  EMI0CF = 0x10; // Non-muxed mode; ON-CHIP ONLY
  86          //  EMI0CN = 0x00; // Access addresses on page 0x0000 for 8-bit XRAM moves
  87          //  SFR_popPage();
  88          //}
  89          //


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    310    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     22    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
