C51 COMPILER V9.02   C8051_SMBUS                                                           05/20/2014 11:03:50 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE C8051_SMBUS
OBJECT MODULE PLACED IN C8051_SMBus.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE C8051_SMBus.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // code by ntu ael
   2          
   3          #define  interrupt(x)     interrupt x
   4          
   5          #include <c8051F120.h>
   6          #include <string.h>
   7          
   8          #include "C8051_SMBus.h"
   9          
  10          sbit SDA = P0 ^ 6; // SMBus on P0.6
  11          sbit SCL = P0 ^ 7; // and P0.7
  12          
  13          char* SMBus_rxBuffer = 0;
  14          volatile short SMBus_rxCount; // counts the number of bytes received
  15          volatile short SMBus_rxLengthMax = 0;
  16          volatile char SMBus_rxIsDone = 0; // private (!) flag
  17          
  18          char* SMBus_txBuffer = 0;
  19          short SMBus_txCount;
  20          volatile short SMBus_txLength = 0;
  21          volatile char SMBus_target = 0;
  22          
  23          volatile char SMBus_MT_retryCount = 0;
  24          #define SMBUS_MT_RETRYLIMIT 20
  25          
  26          char xdata SMBus_StatusCount[27];
  27          
  28          #define SBMUS_INTERRUPT_DISABLE(EIE1_SAVE)    EIE1_SAVE = EIE1 & 0x02; EIE1 &= 0xFD;
  29          #define SMBUS_INTTERUPT_ENABLE(EIE1_SAVE)     EIE1 |= EIE1_SAVE;
  30          
  31          // function needs be called before SMBus reception is enabled
  32          void SMBus_setRxBuffer(void* buffer, short length) {
  33   1        char EIE1_SAVE = EIE1 & 0x02;
  34   1        EIE1 &= 0xFD; // 1111 1101
  35   1        SMBus_rxBuffer = buffer;
  36   1        SMBus_rxLengthMax = length;
  37   1        EIE1 |= EIE1_SAVE;
  38   1      }
  39          
  40          char SMBus_isRxComplete(short* length) {
  41   1        char status;
  42   1        status = SMBus_rxIsDone;
  43   1        if (status) {
  44   2          SMBus_rxIsDone = 0;
  45   2          *length = SMBus_rxCount;
  46   2        }
  47   1        return status;
  48   1      }
  49          
  50          void SMBus_setTxBuffer(void* buffer, short length) {
  51   1        char EIE1_SAVE = EIE1 & 0x02;
  52   1        EIE1 &= 0xFD; // 1111 1101
  53   1        SMBus_txBuffer = buffer;
  54   1        SMBus_txLength = length;
  55   1        EIE1 |= EIE1_SAVE;
C51 COMPILER V9.02   C8051_SMBUS                                                           05/20/2014 11:03:50 PAGE 2   

  56   1      }
  57          
  58          // mode==0 is write, mode==1 is read
  59          // if any communication is presently ongoing, this function will stop the previous communication
  60          void SMBus_start(char mode, char target) {
  61   1        char SFRPAGE_SAVE;
  62   1        char EIE1_SAVE; // 0000 0010
  63   1        switch (mode) {
  64   2        case SMB_writeTo:
  65   2          SMBus_MT_retryCount = 0; // reset write count
  66   2          break;
  67   2        case SMB_readFrom:
  68   2          SMBus_rxIsDone = 0; // this was added by jan when uplink of comm module became relevant
  69   2          break;
  70   2        default:
  71   2          return;
  72   2        }
  73   1        // ---
  74   1        EIE1_SAVE = EIE1 & 0x02; // 0000 0010
  75   1        EIE1 &= 0xFD; // 1111 1101
  76   1        SMBus_target = target | mode;
  77   1        EIE1 |= EIE1_SAVE;
  78   1        // ---
  79   1        SFRPAGE_SAVE = SFRPAGE;
  80   1        SFRPAGE = SMB0_PAGE;
  81   1        STA = 1;
  82   1        SFRPAGE = SFRPAGE_SAVE;
  83   1      }
  84          
  85          // buffer must hold at least 27 bytes
  86          void SMBus_getStatusCount(void* buffer) {
  87   1        char EIE1_SAVE = EIE1 & 0x02;
  88   1        EIE1 &= 0xFD; // 1111 1101
  89   1        memcpy(buffer, SMBus_StatusCount, sizeof SMBus_StatusCount);
  90   1        EIE1 |= EIE1_SAVE;
  91   1      }
  92          
  93          void SMBus_init(char address, long sys_clk) {
  94   1        char SFRPAGE_SAVE = SFRPAGE;
  95   1        long smb_freq = sys_clk > 6000000L ? SMB_FREQUENCY : SMB_FREQUENCY_SLOW;
  96   1        SFRPAGE = SMB0_PAGE;
  97   1        SMB0CN = 0x07;
  98   1        SMB0CR = 257 - (float) (sys_clk / (8 * smb_freq)) - 0.18; // do not remove the 0.18 float TODO the float
             - case is in the wrong place FIXME rounding is different from rounding in EXCEL!!!
  99   1        SMB0ADR = address;
 100   1        SMB0CN |= 0x40;
 101   1        EIE1 |= 0x02; // enable smbus interrupt, page 155
 102   1        SFRPAGE = SFRPAGE_SAVE;
 103   1        memset(SMBus_StatusCount, 0, sizeof SMBus_StatusCount);
 104   1      }
 105          
 106          SMBus_ISR() interrupt (7) {
 107   1        char value;
 108   1        // ---
 109   1        value = (SMB0STA >> 3) & 0x1F;
 110   1        if (value < sizeof SMBus_StatusCount)
 111   1          ++SMBus_StatusCount[value];
 112   1        // ---
 113   1        switch (SMB0STA) { // Status code for the SMBus
 114   2      
 115   2      // MASTER RX --------------------------------------------------------------------------------
 116   2      #define SMB_START 0x08 // START condition transmitted
C51 COMPILER V9.02   C8051_SMBUS                                                           05/20/2014 11:03:50 PAGE 3   

 117   2      #define SMB_RP_START 0x10           // (MT & MR) repeated START
 118   2        case SMB_START:
 119   2        case SMB_RP_START:
 120   2          SMB0DAT = SMBus_target; // load SMB0DAT with slave address + R/W.
 121   2          SMBus_txCount = 0;
 122   2          SMBus_rxCount = 0;
 123   2          STA = 0; // clear STA
 124   2          break;
 125   2          // ---
 126   2      #define SMB_MTADDACK 0x18 // Slave address + W transmitted. ack received
 127   2        case SMB_MTADDACK:
 128   2          SMB0DAT = SMBus_txBuffer[SMBus_txCount]; // load SMB0DAT with data to be transmitted
 129   2          ++SMBus_txCount;
 130   2          break;
 131   2          // ---
 132   2      #define SMB_MTADDNACK 0x20 // Slave address + W transmitted. NACK received
 133   2        case SMB_MTADDNACK:
 134   2          // TODO acknowledge poll to retry
 135   2          if (SMBus_MT_retryCount < SMBUS_MT_RETRYLIMIT) {
 136   3            STA = 1; // this means retry...
 137   3            ++SMBus_MT_retryCount;
 138   3          } else {
 139   3            STO = 1;
 140   3            SMBus_MT_retryCount = 0;
 141   3          }
 142   2          break;
 143   2      // ---
 144   2      #define SMB_MTDBACK 0x28 // data byte transmitted; ACK received
 145   2        case SMB_MTDBACK:
 146   2          // silabs code even has a STA = 1 here, but our version works perfectly fine
 147   2          if (SMBus_txCount < SMBus_txLength) {
 148   3            SMB0DAT = SMBus_txBuffer[SMBus_txCount]; // load SMB0DAT with data to be transmitted
 149   3            ++SMBus_txCount;
 150   3          } else
 151   2            STO = 1; // set STO
 152   2          break;
 153   2          // ---
 154   2      #define SMB_MTDBNACK 0x30 // data byte transmitted; nack received
 155   2        case SMB_MTDBNACK:
 156   2          if (SMBus_MT_retryCount < SMBUS_MT_RETRYLIMIT) {
 157   3            STA = 1;
 158   3            ++SMBus_MT_retryCount;
 159   3          } else {
 160   3            STO = 1;
 161   3            SMBus_MT_retryCount = 0;
 162   3          }
 163   2          break;
 164   2          // ---
 165   2      #define SMB_MTARBLOST 0x38 // arbitration lost
 166   2        case SMB_MTARBLOST:
 167   2          // that means that some other smbus client is allowed to send a message and we have to wait until that
             - sending is complete
 168   2          break;
 169   2          // ---
 170   2      
 171   2      // MASTER RX --------------------------------------------------------------------------------
 172   2      #define SMB_MRADDACK 0x40 // Slave address + R transmitted; ACK received
 173   2        case SMB_MRADDACK:
 174   2          AA = SMBus_rxCount < (SMBus_rxLengthMax - 1); //changed after experiment with ISIS
 175   2          break;
 176   2          // ---
 177   2      #define SMB_MRADDNACK 0x48 // Slave address + R transmitted; NACK received
C51 COMPILER V9.02   C8051_SMBUS                                                           05/20/2014 11:03:50 PAGE 4   

 178   2        case SMB_MRADDNACK:
 179   2          STA = 1; // silabs STA = 1 only
 180   2          // TODO could use a threshold else STO=1
 181   2          break;
 182   2          // ---
 183   2      #define SMB_MRDBACK 0x50 // data byte rec'vd; ACK transmitted
 184   2        case SMB_MRDBACK:
 185   2          SMBus_rxBuffer[SMBus_rxCount] = SMB0DAT; // protect from overflow not necessary since master controls 
             -end of transfer via AA
 186   2          ++SMBus_rxCount;
 187   2          AA = SMBus_rxCount < SMBus_rxLengthMax - 1; // so that for the last byte the case SMB_MRDBNACK is invo
             -ked
 188   2          break;
 189   2          // ---
 190   2      #define SMB_MRDBNACK 0x58 // data byte rec'vd; NACK transmitted
 191   2        case SMB_MRDBNACK:
 192   2          SMBus_rxBuffer[SMBus_rxCount] = SMB0DAT; // protect from overflow not necessary since SMB_MRDBNACK ent
             -ered only once for final byte of transfer
 193   2          ++SMBus_rxCount; // after this instruction we should have SMBus_rxCount == SMBus_rxLengthMax
 194   2          SMBus_rxIsDone = 1; // added (surprisingly late) in development because SMB_MRDBNACK indicates final c
             -har and marks successful reception
 195   2          STO = 1;
 196   2          AA = 1; // obdh and silabs set AA = 1
 197   2          break;
 198   2          // ---
 199   2      
 200   2      // SLAVE RX --------------------------------------------------------------------------------
 201   2      #define SMB_SROADACK 0x60 // Own slave address and Write received. ACK transmitted.
 202   2      #define SMB_SRGADACK 0x70 // General call address received. ACK transmitted
 203   2        case SMB_SROADACK: // wait for data // fall through
 204   2        case SMB_SRGADACK: // wait for data
 205   2          SMBus_rxIsDone = 0;
 206   2          SMBus_rxCount = 0; // Reinitialize the data counters
 207   2          break;
 208   2          // ---
 209   2      #define SMB_SROARBLOST 0x68 // Arbitration lost, own slave address + WRITE received. ACK transmitted.
 210   2      #define SMB_SRGARBLOST 0x78 // Arbitration lost, general call address received. ACK transmitted.
 211   2        case SMB_SROARBLOST: // save current data for retry when bus is free // fall through
 212   2        case SMB_SRGARBLOST: // save current data for retry when bus is free
 213   2          // TODO there used to be a STA = 1; here
 214   2          STA = 1; // what is going on here !?
 215   2          break;
 216   2          // ---
 217   2      #define SMB_SRODBACK 0x80 // Data byte received after addressed by own slave address + WRITE. ACK transmit
             -ted.
 218   2      #define SMB_SRGDBACK 0x90 // Data byte received after addressed by general. ACK transmitted
 219   2        case SMB_SRODBACK: // read SMB0DAT. wait for next byte or stop // fall through
 220   2        case SMB_SRGDBACK: // read SMB0DAT. wait for next byte or stop
 221   2          value = SMB0DAT;
 222   2          if (SMBus_rxCount < SMBus_rxLengthMax)
 223   2            SMBus_rxBuffer[SMBus_rxCount] = value; // store data
 224   2          ++SMBus_rxCount;
 225   2          AA = 1;
 226   2          break;
 227   2          // ---
 228   2      #define SMB_SRODBNACK 0x88 // Data byte received. NACK transmitted
 229   2      #define SMB_SRGDBNACK 0x98 // Data byte received after general call address. NACK transmitted.
 230   2        case SMB_SRODBNACK: // Set STO to reset SMBus. // fall through
 231   2        case SMB_SRGDBNACK: // Set STO to reset SMBus.
 232   2          // TODO need to investigate this case!
 233   2          // STO = 1;
 234   2          AA = 1;
C51 COMPILER V9.02   C8051_SMBUS                                                           05/20/2014 11:03:50 PAGE 5   

 235   2          break;
 236   2          // ---
 237   2      #define SMB_SRSTOP 0xa0 // STOP or repeated START received
 238   2        case SMB_SRSTOP: // No action necessary.
 239   2          SMBus_rxIsDone = 1;
 240   2          break;
 241   2      
 242   2      // SLAVE TX --------------------------------------------------------------------------------
 243   2      
 244   2      #define SMB_STOADACK 0xa8 // Own slave address + READ received. ACK transmitted.
 245   2      #define SMB_STDBACK 0xb8 // Data byte transmitted. ACK received.
 246   2        case SMB_STOADACK: // Load SMB0DAT with data to transmit. // fall through
 247   2        case SMB_STDBACK: // Load SMB0DAT with data to transmit.
 248   2          // case untested since the micro-controllers on Velox are never in SlaveTransmitter mode
 249   2          if (SMBus_txCount < SMBus_txLength) { // read from the TX buffer
 250   3            SMB0DAT = SMBus_txBuffer[SMBus_txCount];
 251   3            ++SMBus_txCount;
 252   3          } else {
 253   3            // error case: other party requests more bytes than expected
 254   3            SMB0DAT = 0;
 255   3          }
 256   2          break;
 257   2          // ---
 258   2      #define SMB_STOARBLOST 0xb0 // Arbitration lost as master. Own address + READ received. ACK transmitted.
 259   2        case SMB_STOARBLOST:
 260   2          // case untested since the micro-controllers on Velox are never in SlaveTransmitter mode
 261   2          STA = 1; // Set STA bit to retry the transfer when the bus is free.
 262   2          break;
 263   2          // ---
 264   2      #define SMB_STDBNACK 0xc0 // Data byte transmitted. NACK received.
 265   2        case SMB_STDBNACK: // wait for STOP
 266   2          // case untested since the micro-controllers on Velox are never in SlaveTransmitter mode
 267   2          SMB0DAT = 0 < SMBus_txCount ? SMBus_txBuffer[SMBus_txCount - 1] : 0;
 268   2          break;
 269   2          // ---
 270   2      #define SMB_STDBLAST 0xc8 // Last data byte transmitted (AA=0). ACK received.
 271   2        case SMB_STDBLAST: // set STO to reset SMBus. // fall through
 272   2          // case untested since the micro-controllers on Velox are never in SlaveTransmitter mode
 273   2          break;
 274   2          // ---
 275   2      #define SMB_SCLHIGHTO 0xd0 // SCL clock high timer per SMB0CR timed out.
 276   2      #define SMB_BUS_ERROR 0x00 // Bus Error (illegal Start or Stop)
 277   2        case SMB_SCLHIGHTO: // set STO to reset SMBus. // fall through
 278   2        case SMB_BUS_ERROR: // set STO to reset SMBus.
 279   2          STO = 1; // not sure what the options are here, state typically does not occur
 280   2          break;
 281   2          // ---
 282   2      #define SMB_IDLE 0xf8 // Idle
 283   2        case SMB_IDLE: // state does not set SI
 284   2          break;
 285   2          // All other status codes invalid.  Reset communication.
 286   2        default:
 287   2          // failure state: Reset communication
 288   2          SMB0CN &= ~0x40;
 289   2          SMB0CN |= 0x40;
 290   2          STA = 0;
 291   2          STO = 0;
 292   2          AA = 0;
 293   2          break;
 294   2        }
 295   1        SI = 0; // Clear interrupt flag
 296   1      }
C51 COMPILER V9.02   C8051_SMBUS                                                           05/20/2014 11:03:50 PAGE 6   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1491    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     79    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
